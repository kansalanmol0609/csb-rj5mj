{"version":3,"sources":["static-data.js","constants/action-type.js","reducers/index.js","reducers/users.js","reducers/messages.js","reducers/typing.js","reducers/contacts.js","reducers/activeUserId.js","store/index.js","actions/index.js","Containers/User.js","Components/Sidebar.js","Components/Empty.js","Components/Header.js","Components/Chats.js","Containers/MessageInput.js","Components/ChatWindow.js","Components/Main.js","Containers/App.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","SET_ACTIVE_USER_ID","DELETE_CONTACT","SET_TYPING_VALUE","SEND_MESSAGE","combineReducers","state","action","type","payload","userId","message","userMessage","Object","keys","assign","typing","userContacts","contactId","newState","activeUserId","store","createStore","reducer","setActiveUserId","id","User","className","onClick","console","log","dispatch","bind","src","alt","Sidebar","map","contact","Empty","first_name","split","Header","Chat","Chats","this","props","Component","MessageInput","value","getState","onSubmit","e","preventDefault","onChange","setTypingValue","target","placeholder","ChatWindow","activeUser","activeMsgs","values","Main","App","render","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.d22280a1.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = (messagesPerUser) => {\r\n  let messages = {};\r\n  _.forEach(users, (user) => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    profile_pic: faker.internet.avatar(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate()\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean()\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}\r\n","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\r\n","import user from \"./users\";\r\nimport contacts from \"./contacts\";\r\nimport activeUserId from \"./activeUserId\";\r\nimport messages from \"./messages\";\r\nimport typing from \"./typing\";\r\n\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport default combineReducers({\r\n  user,\r\n  messages,\r\n  typing,\r\n  contacts,\r\n  activeUserId\r\n});\r\n","import { generateUser } from \"../static-data\";\r\n\r\nexport default function user(state = generateUser(), action) {\r\n  return state;\r\n}\r\n","import { getMessages } from \"../static-data\";\r\nimport { SEND_MESSAGE } from \"../constants/action-type\";\r\n\r\nexport default function messages(state = getMessages(10), action) {\r\n  switch (action.type) {\r\n    case SEND_MESSAGE:\r\n      const { userId, message } = action.payload;\r\n      const userMessage = {\r\n        [userId]: state[userId]\r\n      };\r\n      const number = Object.keys(state[userId]);\r\n      userMessage[userId][number] = {\r\n        number,\r\n        text: message,\r\n        is_user_msg: true\r\n      };\r\n\r\n      return Object.assign({}, state, userMessage);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_TYPING_VALUE, SEND_MESSAGE } from \"../constants/action-type\";\r\n\r\nexport default function typing(state = \"\", action) {\r\n  switch (action.type) {\r\n    case SET_TYPING_VALUE:\r\n      return action.payload;\r\n    case SEND_MESSAGE:\r\n      return \"\";\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { contacts as userContacts } from \"../static-data\";\r\nimport { DELETE_CONTACT } from \"../constants/action-type\";\r\n\r\nexport default function contacts(state = userContacts, action) {\r\n  switch (action.type) {\r\n    case DELETE_CONTACT:\r\n      const contactId = action.payload;\r\n      const { [contactId]: deleted, ...newState } = state;\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_ACTIVE_USER_ID } from \"../constants/action-type\";\r\n\r\nexport default function activeUserId(state = null, action) {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_USER_ID:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"../reducers\";\r\n// import { contacts } from \"../static-data\";\r\n\r\n// const store = createStore(reducer, { contacts });\r\n// now, initial state is managed by the reducer\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import {\r\n  SET_ACTIVE_USER_ID,\r\n  DELETE_CONTACT,\r\n  SET_TYPING_VALUE,\r\n  SEND_MESSAGE\r\n} from \"../constants/action-type\";\r\n\r\nexport const setActiveUserId = (id) => ({\r\n  type: SET_ACTIVE_USER_ID,\r\n  payload: id\r\n});\r\n\r\n// the Delete Chat Action\r\nexport const deleteContact = (user_id) => ({\r\n  type: DELETE_CONTACT,\r\n  payload: user_id\r\n});\r\n\r\nexport const setTypingValue = (value) => ({\r\n  type: SET_TYPING_VALUE,\r\n  payload: value\r\n});\r\n\r\nexport const sendMessage = (message, userId) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: {\r\n    message,\r\n    userId\r\n  }\r\n});\r\n","import React from \"react\";\r\nimport \"./User.css\";\r\nimport store from \"../store\";\r\nimport { setActiveUserId, deleteContact } from \"../actions\";\r\n\r\nconst User = ({ user }) => {\r\n  const { name, profile_pic, status } = user;\r\n\r\n  function handleUserClick({ user_id }) {\r\n    console.log(user_id);\r\n    store.dispatch(setActiveUserId(user_id));\r\n  }\r\n\r\n  function handleCrossClick(e, user_id) {\r\n    e.stopPropagation();\r\n    store.dispatch(setActiveUserId(null));\r\n    store.dispatch(deleteContact(user_id));\r\n  }\r\n\r\n  return (\r\n    <div className=\"User\" onClick={handleUserClick.bind(null, user)}>\r\n      <img src={profile_pic} alt={name} className=\"User__pic\" />\r\n      <div className=\"User__details\">\r\n        <p className=\"User__details-name\">{name} </p>\r\n        <p className=\"User__details-status\">{status}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React from \"react\";\r\nimport User from \"../Containers/User\";\r\nimport \"./Sidebar.css\";\r\n\r\nconst Sidebar = ({ contacts }) => {\r\n  return (\r\n    <aside className=\"Sidebar\">\r\n      {contacts.map((contact) => (\r\n        <User user={contact} key={contact.user_id} />\r\n      ))}\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./Empty.css\";\r\nconst Empty = ({ user }) => {\r\n  const { name, profile_pic, status } = user;\r\n  const first_name = name.split(\" \")[0];\r\n  return (\r\n    <div className=\"Empty\">\r\n      <h1 className=\"Empty__name\">Welcome, {first_name} </h1>\r\n      <img src={profile_pic} alt={name} className=\"Empty__img\" />\r\n      <p className=\"Empty__status\">\r\n        <b>Status:</b> {status}\r\n      </p>\r\n      <button className=\"Empty__btn\">Start a conversation</button>\r\n      <p className=\"Empty__info\">\r\n        Search for someone to start chatting with or go to Contacts to see who\r\n        is available\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\nexport default Empty;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = ({ user }) => {\r\n  console.log(user);\r\n  const { name, status } = user;\r\n  return (\r\n    <header className=\"Header\">\r\n      <h1 className=\"Header__name\">{name}</h1>\r\n      <p className=\"Header__status\">{status}</p>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"./Chats.css\";\r\nconst Chat = ({ message }) => {\r\n  const { text, is_user_msg } = message;\r\n  return (\r\n    <span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>{text}</span>\r\n  );\r\n};\r\nclass Chats extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Chats\">\r\n        {this.props.messages.map((message) => (\r\n          <Chat message={message} key={message.number} />\r\n        ))}{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Chats;\r\n","import React from \"react\";\r\nimport store from \"../store\";\r\nimport { setTypingValue, sendMessage } from \"../actions\";\r\nimport \"./MessageInput.css\";\r\n\r\nconst MessageInput = ({ value }) => {\r\n  const handleChange = (e) => {\r\n    store.dispatch(setTypingValue(e.target.value));\r\n  };\r\n\r\n  const state = store.getState();\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { typing, activeUserId } = state;\r\n    store.dispatch(sendMessage(typing, activeUserId));\r\n  };\r\n\r\n  return (\r\n    <form className=\"Message\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"Message__input\"\r\n        onChange={handleChange}\r\n        value={value}\r\n        placeholder=\"write a message\"\r\n      />{\" \"}\r\n    </form>\r\n  );\r\n};\r\nexport default MessageInput;\r\n","import React from \"react\";\r\nimport store from \"../store\";\r\nimport Header from \"./Header\";\r\nimport Chats from \"./Chats\";\r\nimport MessageInput from \"../Containers/MessageInput\";\r\n\r\nimport \"./ChatWindow.css\";\r\n\r\nimport _ from \"lodash\";\r\n\r\nconst ChatWindow = ({ activeUserId }) => {\r\n  const state = store.getState();\r\n  const activeUser = state.contacts[activeUserId];\r\n  const activeMsgs = state.messages[activeUserId];\r\n  const { typing } = state;\r\n\r\n  return (\r\n    <div className=\"ChatWindow\">\r\n      <Header user={activeUser} />\r\n      <Chats messages={_.values(activeMsgs)} />\r\n      <MessageInput value={typing} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import React from \"react\";\r\nimport \"./Main.css\";\r\nimport Empty from \"./Empty\";\r\nimport ChatWindow from \"./ChatWindow\";\r\n\r\nconst Main = ({ user, activeUserId }) => {\r\n  const renderMainContent = () => {\r\n    if (!activeUserId) {\r\n      return <Empty user={user} activeUserId={activeUserId} />;\r\n    } else {\r\n      return <ChatWindow activeUserId={activeUserId} />;\r\n    }\r\n  };\r\n  return <main className=\"Main\">{renderMainContent()}</main>;\r\n};\r\n\r\nexport default Main;\r\n","import \"./App.css\";\nimport Sidebar from \"../Components/Sidebar\";\nimport Main from \"../Components/Main\";\nimport store from \"../store\";\nimport _ from \"lodash\";\n\nexport default function App() {\n  const { contacts, user, activeUserId } = store.getState();\n  return (\n    <div className=\"App\">\n      <Sidebar contacts={_.values(contacts)} />\n      <Main user={user} activeUserId={activeUserId} />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./Containers/App\";\nimport store from \"./store\";\n\nfunction fancyLog() {\n  console.log(\"%c Rendered with 👉 👉 👇\", \"background: purple; color: #FFF\");\n  console.log(store.getState());\n}\n\nconst render = () => {\n  fancyLog();\n  return ReactDOM.render(\n    <StrictMode>\n      <App />\n    </StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\nstore.subscribe(render);\n\nrender();\n"],"sourceRoot":""}